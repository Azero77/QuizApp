
<MudPaper Class="pa-3 container" dir="rtl">
    <!-- Flex layout for question number + text -->
    <MudStack Row="true" Justify="Justify.FlexStart" Class="mb-4">
        <MudText Typo="Typo.inherit" Color="Color.Primary" Class="me-2">
            @QuestionNumber.
        </MudText>
        <MudText Typo="Typo.h4">
            @Question.QuestionText
        </MudText>
    </MudStack>
    <!-- Choices as selectable list items -->
    <MudList
            SelectedValueChanged="SelectChoice"
             SelectionMode="SelectionMode.SingleSelection"
             T="byte?"
             Disabled="Corrected"
             Color="@Color.Info"
             Dense="true" Hover="true">
        @for (byte i = 0; i < Question.QuestionChoices.Count(); i++)
        {
            var choice = Question.QuestionChoices[i];
            var prefix = GetChoicePrefix(i);

            <MudListItem Class="@($"d-flex align-items-center question-choice mt-3 pa-3 fs-3 rounded")"
                         Value="@((byte?)i)"
                         Style="@($"cursor:pointer; {GetChoiceClass(i)}")">
                <div class="question-choice">
                    <MudStack Row="true" Gap="Gap.Small">
                        <MudText Typo="Typo.body1">@prefix.</MudText>
                            <MudStack Row="true">
                             @choice
                        </MudStack>
                    </MudStack>
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    [Parameter]
    public Question Question { get; set; } = null!;

    [Parameter]
    public int QuestionNumber { get; set; }

    //if the question is readonly (Corrected = true) then it will be a selectedChoice
    [Parameter]
    public byte? SelectedChoice { get; set; } = null!;

    [CascadingParameter]
    public bool Corrected { get; set; }

    

    [Parameter]
    public EventCallback<byte?> SelectedChoiceChanged { get; set; } // Add this

    [Parameter]
    [EditorRequired]
    public EventCallback<(int,byte?)> QuestionSelected { get; set; }


    private string GetChoicePrefix(int index)
    {
        // Convert the index to a corresponding letter (0 → A, 1 → B, 2 → C, etc.)
        return ((char)('A' + index)).ToString();
    }

    private string GetChoiceClass(byte choice)
    {
        if(Corrected)
        {
            if (choice == Question.QuestionAnswer && choice == SelectedChoice)
                return "background : #66FF00; Color : white !important";
            else if (choice == Question.QuestionAnswer)
                return "border: 4px solid #66FF00; Color : Black !important";
            else if (choice == SelectedChoice)
                return "background : #FF3800 ; Color : white !important";
        }
        return string.Empty;
    }

    private void SelectChoice(byte? choice)
    {
        if(choice is not null)
        {
            SelectedChoice = choice;
            QuestionSelected.InvokeAsync((QuestionNumber, choice));
        }
    }
}