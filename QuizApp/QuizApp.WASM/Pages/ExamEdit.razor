@inherits HttpClientErrorHandler
@page "/admin/exams/{id?}"

@if (ExamState.Exam is not null)
{
    <div class="d-flex flex-column justify-content-center align-items-center">
        <EditForm method="post"
                  Model="ExamState.Exam"
                  OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(ExamState.Exam?.id))
            {
                <div>
                    <label for="id">Exam Id:</label>
                    <InputText @bind-Value="ExamState.Exam.id" disabled class="form-control" />
                </div>
            }
            <div>
                <label for="Name">Name:</label>
                <InputText @bind-Value="ExamState.Exam!.Name" class="form-control" />
                <ValidationMessage For="() => ExamState.Exam.Name" />
            </div>
            @if(_mode == Mode.Create)
            {
                <label>Input File</label>
                <InputFile OnChange="FileAdded"></InputFile>
            }
            <CascadingValue Value="ExamState">
                <ExamView />
            </CascadingValue>
        </EditForm>
    </div>
}
else
{
    <MudProgressCircular />
}

@code {

    private Mode _mode;
    [Parameter]public string Id { get; set; } = null!;
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/";

    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    [Inject] public ExamService ExamState { get; set; } = null!;

    [Inject] public ExamsClient _client { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        _mode = Id is null ? Mode.Create : Mode.Edit;
        ExamState.Initialize(await AssignExam() ?? null!,ExamMode.Alter);
        if(ExamState.Exam is null)
        {
            AddError("Exam Not Found");
            return;
        }
        StateHasChanged();
    }
    private async Task<Exam?> AssignExam()
    {
        if(_mode == Mode.Create)
        {
            return new Exam();
        }
        else if(_mode == Mode.Edit)
        {
            return await _client.GetExamAsync(Id);
        }
        return null;
    }
    public async Task OnSubmit()
    {
        Exam result = null!;
        if (_mode == Mode.Create)
        {
            result = await ExamState.AddExam();
        }
        else if (_mode == Mode.Edit)
        {
            result = await ExamState.UpdateExam();
        }
        NavigationManager.NavigateTo(ReturnUrl);
    }

    private void FileAdded(InputFileChangeEventArgs e)
    {
    }
    public enum Mode
    {
        Create = 0,
        Edit = 1
    }
}
