@inherits HttpClientErrorHandler
@page "/admin/exams/{id?}"

@if (ExamState.Exam is not null)
{
    <div class="d-flex flex-column justify-content-center align-items-center">
        <EditForm method="post"
                class="d-flex flex-column justify-content-center align-items-center"
                    FormName="MainForm"
                  Model="ExamState.Exam"
                  OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary/>    
            @if (!string.IsNullOrEmpty(ExamState.Exam?.id))
            {
                <div>
                    <label for="id">Exam Id:</label>
                    <InputText @bind-Value="ExamState.Exam.id" disabled class="form-control" />
                </div>
            }
            <div>
                
                <MudTextField T="string" Label="Name" @bind-Value="ExamState.Exam!.Name"
                Class="d-block p-4"
                Required="true" RequiredError="User name is required!" />

                <ValidationMessage For="() => ExamState.Exam.Name" />
            </div>
            @if(_mode == Mode.Create)
            {
                <MudFileUpload T="IBrowserFile" FilesChanged="FileAdded">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Read Exam
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            }
            <div>
                <CascadingValue Value="ExamState">
                    <ExamView />
                </CascadingValue>
                @if(_fileStatus == Status.Loading)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <p>Loading...</p>
                }
            </div>
           @if(ExamState.Exam.Questions.Count > 0)
            {
                <button type="submit" class="btn btn-primary text-center p-4">Submit</button>
            }
        </EditForm>
        
    </div>
}
else
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}

@code {

    private Mode _mode;
    [Parameter]public string Id { get; set; } = null!;
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/";
    private Status _fileStatus = Status.None;

    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    [Inject] public ExamService ExamState { get; set; } = null!;

    [Inject] public ExamsClient _client { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        _mode = Id is null ? Mode.Create : Mode.Edit;
        ExamState.Initialize(await AssignExam() ?? null!,ExamMode.Alter);
        if(ExamState.Exam is null)
        {
            AddError("Exam Not Found");
            return;
        }
        StateHasChanged();
    }
    private async Task<Exam?> AssignExam()
    {
        if(_mode == Mode.Create)
        {
            return new Exam();
        }
        else if(_mode == Mode.Edit)
        {
            return await _client.GetExamAsync(Id);
        }
        return null;
    }
    public async Task OnSubmit()
    {
        if(ExamState.Exam.Questions.Count <= 0)
        {
            return;
        }

        if (_mode == Mode.Create)
        {
            await ExamState.AddExam();
        }
        else if (_mode == Mode.Edit)
        {
            await ExamState.UpdateExam();
        }
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }

    private async Task FileAdded(IBrowserFile file)
    {
        _fileStatus = Status.Loading;
        ExamState.Exam.Questions = new List<Question>();
        await Task.Delay(5000);

        await foreach (Question? q in await _client.GenerateExam(file))
        {
            if (q is not null)
                ExamState.Exam.Questions.Add(q);
        }
        _fileStatus = Status.Finsihed;
    }
    public enum Mode
    {
        Create = 0,
        Edit = 1
    }

    private enum Status
    {
        None,
        Loading,
        Finsihed
    }
}
