    @page "/ReadExam/{Id}"
    @inherits HttpClientErrorHandler
    @inject NavigationManager NavigationManager
    @inject ExamsClient Client
    <div class="d-flex flex-column justify-content-center align-items-center">
        @if(Exam is not null)
        {
            <CascadingValue Value="ExamState">
                    <ExamView />
            </CascadingValue>
        <button @onclick="SubmitExam" class="btn btn-primary">Submit Exam</button>
    }
        else
        {
            <MudProgressCircular/>
        }
    </div>

@code {
    //Page for Solving the exam while reading it;
    private const ExamMode _examMode = ExamMode.Read;

    [SupplyParameterFromQuery]
    public string submissionName { get; set; } = string.Empty;
    [Parameter]
    public string Id { get; set; } = string.Empty;
    [Inject] public ExamService ExamState { get; set; } = null!;
    public Exam Exam => ExamState.Exam;

    protected override async Task OnInitializedAsync()
    {
        Exam? exam = await Client.GetExamAsync(Id);
        if(exam is null)
        {
            AddError("Page not found");
            return;
        }
        ExamState.Initialize(exam, ExamMode.Read);
    }
    private async Task SubmitExam()
    {
        var result  = await ExamState.SubmitExam(submissionName);
        if (result.IsSuccessStatusCode)
        {
            string? id = (await result.Content.ReadFromJsonAsync<Submission?>())?.Id;
            string url = UrlHelpers.GetSubmissionLink(Exam.id!, id ?? string.Empty);
            NavigationManager!.NavigateTo(url);
        }
    }
    }
