@page "/Exams/{Id}"
@if (!string.IsNullOrEmpty(submission?.SubmissionPersonName))
{
    <div class=" data-latex exam-container d-flex flex-column justify-content-center align-items-center">
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
        @if (Exam is not null)
        {
            <CascadingValue Value="Corrected">
                @{
                    int i = 0;
                    foreach (Question question in Exam.Questions)
                    {
                        i++;
                        <!-- Add w-100 and text-center to the child container -->
                        <div class="m-4 w-100 ">
                            <QuestionView QuestionSelected="SelectChoices"
                                            Question="question" QuestionNumber="i" />
                        </div>
                    }
                }
            </CascadingValue>
        }
        else
        {
            <MudProgressCircular Color
            ="Color.Info"
            Indeterminate="true"
            Size="Size.Large"
            Style="height:30vh;width:30vh;align-self:center;margin-top:15%"/>
        }

    <div>
        <MudButton OnClick="SubmitExam">Correct Exam</MudButton>
    </div>
    @if(result is not null)
        {
            <div class="bg-info p-3 m-3 text-center">
                Your result is @result
            </div>
        }
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Inject]
    public ExamsClient _client { get; set; } = null!;

    [Inject]
    public NavigationManager? Navigation{ get; set; }
    private int? result = null;

    [SupplyParameterFromQuery]
    [Parameter]
    public string submissionName { get; set; } = string.Empty;
    private string?[] _choices = null!;
    private Submission submission = null!;

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    public Exam? Exam { get; set; } = null;

    [Parameter]
    public bool Corrected { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
            Navigation?.NavigateTo("/NotFound");
        Exam = await InitializeExam(Id);
        _choices = new string[Exam!.Questions.Count()];
        submission = new() { ExamId = Exam!.id!,SubmissionPersonName = submissionName};
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize MathJax with CommonHTML output for copyable equations
            await JSRuntime.InvokeVoidAsync("eval", @"
            MathJax = {
                tex: {
                    inlineMath: [['\\(', '\\)']],
                    displayMath: [['$$', '$$']]
                },
                options: {
                    enableCopy: true, // Enable copying of equations
                    renderActions: {
                        addMenu: [0, '', ''] // Disable the right-click menu
                    }
                },
                chtml: {
                    scale: 1.2, // Adjust scale if needed
                    mtextInheritFont: true // Inherit font for better integration
                }
            };
        ");

            // Load MathJax script with CommonHTML output
            await JSRuntime.InvokeVoidAsync("loadMathJax", "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js");
        }

        // Render equations after content is rendered
        await JSRuntime.InvokeVoidAsync("renderMathInElement");
    }

    private Task<Exam?> InitializeExam(string id) => _client?.GetExamAsync(id) ?? throw new InvalidDataException();

    private async Task SubmitExam()
    {
        if (_choices is not null)
        {
            submission.Choices = new List<string?>(_choices);
            var result = await _client!.SubmitExam(submission);
            if (result.IsSuccessStatusCode)
            {
                string? id = (await result.Content.ReadFromJsonAsync<Submission?>())?.id;
                submission.id = id ?? throw new HttpRequestException();
                submission.DateSubmitted = DateTime.Now;
                IDictionary<string, string> queryParams = new Dictionary<string, string>
                {
                    {"submissionId",submission.id},
                    {"examId",Exam!.id!}
                };
                string url = QueryHelpers.AddQueryString("/submissionResult",queryParams);

                Navigation!.NavigateTo(url);
            }
        }
    }

    private void SelectChoices(int questionIndex, string answer)
    {
        _choices[questionIndex - 1] = answer;
    }
}
