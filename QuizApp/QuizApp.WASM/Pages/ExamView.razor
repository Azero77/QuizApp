@page "/Exams/{Id}"
<div class="exam-container d-flex flex-column justify-content-center align-items-center">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    @if (Exam is not null)
    {
        long i = 0;
        foreach (Question question in Exam.Questions)
        {
            i++;
            <!-- Add w-100 and text-center to the child container -->
            <div class="m-4 w-100 text-center data-latex">
                <QuestionView Question="question" QuestionNumber="i" />
            </div>
        }
    }
    else
    {
            <MudProgressCircular Color="Color.Info"
                                 Indeterminate="true"
                                 Size="Size.Large"
                                 Style="height:30vh;width:30vh;align-self:center;margin-top:15%"/>
    }
</div>



@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Inject]
    public ExamsClient? _client { get; set; }

    [Inject]
    public NavigationManager? Navigation{ get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    public Exam? Exam { get; set; } = null;
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
            Navigation?.NavigateTo("/NotFound");
        Exam = await InitializeExam(Id);
        
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize MathJax with CommonHTML output for copyable equations
            await JSRuntime.InvokeVoidAsync("eval", @"
            MathJax = {
                tex: {
                    inlineMath: [['\\(', '\\)']],
                    displayMath: [['$$', '$$']]
                },
                options: {
                    enableCopy: true, // Enable copying of equations
                    renderActions: {
                        addMenu: [0, '', ''] // Disable the right-click menu
                    }
                },
                chtml: {
                    scale: 1.2, // Adjust scale if needed
                    mtextInheritFont: true // Inherit font for better integration
                }
            };
        ");

            // Load MathJax script with CommonHTML output
            await JSRuntime.InvokeVoidAsync("loadMathJax", "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js");
        }

        // Render equations after content is rendered
        await JSRuntime.InvokeVoidAsync("renderMathInElement");
    }

    private Task<Exam?> InitializeExam(string id) => _client?.GetExamAsync(id) ?? throw new InvalidDataException();
}
